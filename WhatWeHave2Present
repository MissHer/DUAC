# Installing packages and masking functions --------------------
rm(list=ls())
list.of.packages <- c("dplyr", "stringr","ggmap", "RPostgreSQL", "oce")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only = TRUE)
select <- dplyr::select
rm(list.of.packages,new.packages)
# Defining functions to be used --------------------
getGOA <- function(){
  #Syntax: goa <- getGOA()
  my_db  <- src_postgres(dbname="csci403",host="flowers.mines.edu",user="ceberlco",password=.rs.askForPassword("DB Pass?"))
  return(as.data.frame(tbl(my_db,"crimetable"),n=-1))
}
goa <- getGOA()


#install.packages()
list.of.packages <- c("rgdal", "raster","maptools", "plotrix", "sp", "plotGoogleMaps", "jpeg", "spatstat", "fields")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only = TRUE)
select <- dplyr::select
rm(list.of.packages,new.packages)

setwd("Z:/DU Analytics Challenge")
getwd()

###############################################
# PLOTTING USING SHAPE FILE
###############################################
#download.file("http://data.denvergov.org/download/gis/statistical_neighborhoods/shape/statistical_neighborhoods.zip", destfile = "statistical_neighborhoods.zip")
#unzip("statistical_neighborhoods.zip", exdir=Z:/DU Analytics Challenge)
border<-shapefile("Z:/DU Analytics Challenge/statistical_neighborhoods.shp")
#Denver <- border[paste(border$region)=="Denver",]

crime<-goa[!is.na(goa$longitude)&!is.na(goa$latitude),]
crime$pin<-as.factor(crime$pin)
crime$rin<-as.factor(crime$rin)
crime$ucr_cat<-as.factor(crime$ucr_cat)
crime$translation <-as.factor(crime$translation)
Crimes<-crime
coordinates(crime)=~longitude+latitude

#projection(crime) = projection(border)
#overlay<-over(crime, border)
#crime$over<-overlay$OBJECTID_1

#jpeg("PP_plot.jpg",2500,2000,res=300)
#plot(crime,pch="+",cex=0.5,main="",col=crime$ucr_cat)
#plot(crime,add=T)
#legend(x=-0.53,y=51.41,pch="+",col=unique(crime$ucr_cat),legend=unique(crime$ucr),cex=0.4)
#dev.off()

###############################################
# PLOTTING USING GOOGLE
###############################################
#3 Larceny, 8 Theft from MV, 7&9 Assault(simple and aggravated), 5 burglary, 20 mv theft, 17 drugs
Drugs <- crime[crime$ucr_cat==unique(crime$ucr_cat)[3],]
Drugs <- remove.duplicates(Drugs)

window <- as.owin(border)
Drugs.ppp <- ppp(x=Drugs@coords[,1],y=Drugs@coords[,2], window=window)
DenUTM <- spTransform(border, CRS("+proj=longlat +datum=WGS84"))
Density<-density.ppp(Drugs.ppp, sigma=bw.diggle, W=as.mask(window))

#Density <- density.ppp(Drugs.ppp, sigma = 500,edge=T, W=as.mask(window))
Density.raster <- raster(Density)
projection(Density.raster)=projection(DenUTM)
m<-plotGoogleMaps(Density.raster,filename="Crimes_Density_Drugs.htm",layerName="Number of Crimes", fillOpacity=0.4,strokeWeight=0,colPalette=(oce.colorsJet(10)))

#Compare to ShapeFile
#This will save to your folder because it is too big to show up in RStudio 
crime<-goa[!is.na(goa$longitude)&!is.na(goa$latitude),]
crime$pin<-as.factor(crime$pin)
crime$rin<-as.factor(crime$rin)
crime$ucr_cat<-as.factor(crime$ucr_cat)
crime$translation <-as.factor(crime$translation)
coordinates(crime)=~longitude+latitude

Drugs <- crime[crime$ucr_cat==unique(crime$ucr_cat)[17],]
projection(Drugs) = projection(border)
overlay<-over(Drugs, border)
Drugs$over<-overlay$OBJECTID_1

jpeg("Larceny_plot.jpg",2500,2000,res=300)
plot(Drugs,pch="+",cex=0.5,main="",col=Drugs$translation)
#plot(Drugs,add=T)
legend("bottomright",pch="+",col=unique(Drugs$translation),legend=unique(Drugs$translation),cex=0.4)
dev.off()

jpeg("K_Larceny_Nearest_Neighbor_Distance_Function_G.jpg", 1000,1000, res=200)
plot(Kest(Drugs.ppp),main="Larceny Related Crimes") #clustered distribution
dev.off()

inten<-density.ppp(Drugs.ppp, sigma=bw.diggle)
inten2<-density.ppp(Drugs.ppp, sigma=bw.ppl)
image.plot(inten$xcol, inten$yrow, t(inten$v))
kbands(inten, Drugs.ppp)
??image.plot


kbands <- function(inten, data, title){
  #intensity should be an expression or a pixel image, the argument to rpoispp
  # data should be a ppp object
  
  #randomly sample from the intensity function 1000 times and calculate the Kest for each, plot max,min
  Kestimates <-matrix(0,1000,513)
  for (i in 1:1000){
    samp <- rpoispp(inten)
    win=owin(c(0,15),c(0,15))
    samp=ppp(samp$x,samp$y,window=win)
    est <- Kest(samp, correction="best")
    h<-est$r
    Kestimates[i,]<-est$iso
  }
  
  Kdata <- Kest(data,correction="best")
  
  Kmean <-rep(0,513)
  Kmax <-rep(0,513)
  Kmin <-rep(0,513)
  for (i in 1:513){
    Kmean[i] <- sqrt(mean(Kestimates[,i]/pi))
    Kmax[i] <- sqrt(max(Kestimates[,i]/pi))
    Kmin[i] <- sqrt(min(Kestimates[,i]/pi))
  }
  
  plot(h, Kmean, type="l",lty=1, col=4, main=title, xlab="r", ylab="L(r)")
  lines(h, Kmax,  lty=2, col=4)
  lines(h, Kmin, lty=2, col=4)
  lines(h, sqrt(Kdata$iso)/pi, lty=1, col=1)
  
}
